package de.netzwerk_universitaetsmedizin.codex.processes.tools.generator;

import de.netzwerk_universitaetsmedizin.codex.processes.tools.generator.CertificateGenerator.CertificateFiles;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Map;
import java.util.Properties;

public class ConfigGenerator {

    private static final Logger logger = LoggerFactory.getLogger(ConfigGenerator.class);

    private Properties dockerDic1FhirConfigProperties;
    private Properties dockerDic2FhirConfigProperties;
    private Properties dockerZarsFhirConfigProperties;

    private Properties readProperties(Path propertiesFile) {
        Properties properties = new Properties();
        try (InputStream in = Files.newInputStream(propertiesFile);
             InputStreamReader reader = new InputStreamReader(in, StandardCharsets.UTF_8)) {
            properties.load(reader);
        } catch (IOException e) {
            logger.error("Error while reading properties from " + propertiesFile.toString(), e);
            throw new RuntimeException(e);
        }
        return properties;
    }

    private void writeProperties(Path propertiesFiles, Properties properties) {
        try (OutputStream out = Files.newOutputStream(propertiesFiles);
             OutputStreamWriter writer = new OutputStreamWriter(out, StandardCharsets.UTF_8)) {
            properties.store(writer, "Generated by test-data-generator");
        } catch (IOException e) {
            logger.error("Error while writing properties to " + propertiesFiles.toString(), e);
            throw new RuntimeException(e);
        }
    }

    public void modifyDockerTestFhirConfigProperties(Map<String, CertificateFiles> clientCertificateFilesByCommonName) {
        modifyDockerDic1FhirConfigProperties(clientCertificateFilesByCommonName);
        modifyDockerDic2FhirConfigProperties(clientCertificateFilesByCommonName);
        modifyDockerZarsFhirConfigProperties(clientCertificateFilesByCommonName);
    }

    private void modifyDockerDic1FhirConfigProperties(Map<String, CertificateFiles> clientCertificateFilesByCommonName) {
        CertificateFiles dic1Client = clientCertificateFilesByCommonName.get("dic-1-client");
        CertificateFiles webbrowserTestUser = clientCertificateFilesByCommonName.get("Webbrowser Test User");

        Path dockerTestFhirConfigTemplateFile = Paths
                .get("src/main/resources/config-templates/docker-test-dic-1-fhir-config.properties");
        dockerDic1FhirConfigProperties = readProperties(dockerTestFhirConfigTemplateFile);
        dockerDic1FhirConfigProperties.setProperty("org.highmed.dsf.fhir.local-user.thumbprints",
                dic1Client.getCertificateSha512ThumbprintHex() + ","
                        + webbrowserTestUser.getCertificateSha512ThumbprintHex());

        writeProperties(Paths.get("config/docker-test-dic-1-fhir-config.properties"),
                dockerDic1FhirConfigProperties);
    }

    private void modifyDockerDic2FhirConfigProperties(Map<String, CertificateFiles> clientCertificateFilesByCommonName) {
        CertificateFiles dic2Client = clientCertificateFilesByCommonName.get("dic-2-client");
        CertificateFiles webbrowserTestUser = clientCertificateFilesByCommonName.get("Webbrowser Test User");

        Path dockerTestFhirConfigTemplateFile = Paths
                .get("src/main/resources/config-templates/docker-test-dic-2-fhir-config.properties");
        dockerDic2FhirConfigProperties = readProperties(dockerTestFhirConfigTemplateFile);
        dockerDic2FhirConfigProperties.setProperty("org.highmed.dsf.fhir.local-user.thumbprints",
                dic2Client.getCertificateSha512ThumbprintHex() + ","
                        + webbrowserTestUser.getCertificateSha512ThumbprintHex());

        writeProperties(Paths.get("config/docker-test-dic-2-fhir-config.properties"),
                dockerDic2FhirConfigProperties);
    }

    private void modifyDockerZarsFhirConfigProperties(Map<String, CertificateFiles> clientCertificateFilesByCommonName) {
        CertificateFiles zarsClient = clientCertificateFilesByCommonName.get("zars-client");
        CertificateFiles webbrowserTestUser = clientCertificateFilesByCommonName.get("Webbrowser Test User");

        Path dockerTestFhirConfigTemplateFile = Paths
                .get("src/main/resources/config-templates/docker-test-zars-fhir-config.properties");
        dockerZarsFhirConfigProperties = readProperties(dockerTestFhirConfigTemplateFile);
        dockerZarsFhirConfigProperties.setProperty("org.highmed.dsf.fhir.local-user.thumbprints",
                zarsClient.getCertificateSha512ThumbprintHex() + ","
                        + webbrowserTestUser.getCertificateSha512ThumbprintHex());

        writeProperties(Paths.get("config/docker-test-zars-fhir-config.properties"), dockerZarsFhirConfigProperties);
    }

    public void copyDockerTestFhirConfigProperties() {
        Path dockerMedic1FhirConfigPropertiesFile = Paths
                .get("../../codex-processes-ap2-docker-test-setup/dic-1/fhir/app/conf/config.properties");
        logger.info("Copying config.properties to {}", dockerMedic1FhirConfigPropertiesFile);
        writeProperties(dockerMedic1FhirConfigPropertiesFile, dockerDic1FhirConfigProperties);

        Path dockerMedic2FhirConfigPropertiesFile = Paths
                .get("../../codex-processes-ap2-docker-test-setup/dic-2/fhir/app/conf/config.properties");
        logger.info("Copying config.properties to {}", dockerMedic2FhirConfigPropertiesFile);
        writeProperties(dockerMedic2FhirConfigPropertiesFile, dockerDic2FhirConfigProperties);

        Path dockerZarsFhirConfigPropertiesFile = Paths
                .get("../../codex-processes-ap2-docker-test-setup/zars/fhir/app/conf/config.properties");
        logger.info("Copying config.properties to {}", dockerZarsFhirConfigPropertiesFile);
        writeProperties(dockerZarsFhirConfigPropertiesFile, dockerZarsFhirConfigProperties);
    }
}
